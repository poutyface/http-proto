# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pubsub_pb2 as pubsub__pb2


class PubsubStub(object):
    """rpc CreateTopic (Topic) returns (Topic) {}
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSubscription = channel.unary_unary(
                '/pubsub.Pubsub/CreateSubscription',
                request_serializer=pubsub__pb2.Subscription.SerializeToString,
                response_deserializer=pubsub__pb2.Subscription.FromString,
                )
        self.DeleteSubscription = channel.unary_unary(
                '/pubsub.Pubsub/DeleteSubscription',
                request_serializer=pubsub__pb2.DeleteSubscriptionRequest.SerializeToString,
                response_deserializer=pubsub__pb2.Empty.FromString,
                )
        self.Publish = channel.unary_unary(
                '/pubsub.Pubsub/Publish',
                request_serializer=pubsub__pb2.PublishRequest.SerializeToString,
                response_deserializer=pubsub__pb2.PublishResponse.FromString,
                )
        self.Pull = channel.unary_unary(
                '/pubsub.Pubsub/Pull',
                request_serializer=pubsub__pb2.PullRequest.SerializeToString,
                response_deserializer=pubsub__pb2.PullResponse.FromString,
                )
        self.StreamingPull = channel.unary_stream(
                '/pubsub.Pubsub/StreamingPull',
                request_serializer=pubsub__pb2.StreamingPullRequest.SerializeToString,
                response_deserializer=pubsub__pb2.StreamingPullResponse.FromString,
                )


class PubsubServicer(object):
    """rpc CreateTopic (Topic) returns (Topic) {}
    """

    def CreateSubscription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSubscription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pull(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingPull(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PubsubServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSubscription': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSubscription,
                    request_deserializer=pubsub__pb2.Subscription.FromString,
                    response_serializer=pubsub__pb2.Subscription.SerializeToString,
            ),
            'DeleteSubscription': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSubscription,
                    request_deserializer=pubsub__pb2.DeleteSubscriptionRequest.FromString,
                    response_serializer=pubsub__pb2.Empty.SerializeToString,
            ),
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=pubsub__pb2.PublishRequest.FromString,
                    response_serializer=pubsub__pb2.PublishResponse.SerializeToString,
            ),
            'Pull': grpc.unary_unary_rpc_method_handler(
                    servicer.Pull,
                    request_deserializer=pubsub__pb2.PullRequest.FromString,
                    response_serializer=pubsub__pb2.PullResponse.SerializeToString,
            ),
            'StreamingPull': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamingPull,
                    request_deserializer=pubsub__pb2.StreamingPullRequest.FromString,
                    response_serializer=pubsub__pb2.StreamingPullResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pubsub.Pubsub', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Pubsub(object):
    """rpc CreateTopic (Topic) returns (Topic) {}
    """

    @staticmethod
    def CreateSubscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.Pubsub/CreateSubscription',
            pubsub__pb2.Subscription.SerializeToString,
            pubsub__pb2.Subscription.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSubscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.Pubsub/DeleteSubscription',
            pubsub__pb2.DeleteSubscriptionRequest.SerializeToString,
            pubsub__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.Pubsub/Publish',
            pubsub__pb2.PublishRequest.SerializeToString,
            pubsub__pb2.PublishResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Pull(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.Pubsub/Pull',
            pubsub__pb2.PullRequest.SerializeToString,
            pubsub__pb2.PullResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingPull(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pubsub.Pubsub/StreamingPull',
            pubsub__pb2.StreamingPullRequest.SerializeToString,
            pubsub__pb2.StreamingPullResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
