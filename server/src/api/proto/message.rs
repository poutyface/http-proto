// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct RequestHeader {
    // message fields
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestHeader {
    fn default() -> &'a RequestHeader {
        <RequestHeader as ::protobuf::Message>::default_instance()
    }
}

impl RequestHeader {
    pub fn new() -> RequestHeader {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestHeader {
        RequestHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &RequestHeader| { &m.path },
                |m: &mut RequestHeader| { &mut m.path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestHeader>(
                "RequestHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestHeader {
        static instance: ::protobuf::rt::LazyV2<RequestHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestHeader::new)
    }
}

impl ::protobuf::Clear for RequestHeader {
    fn clear(&mut self) {
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestCommandRecord {
    // message fields
    pub header: ::protobuf::SingularPtrField<RequestHeader>,
    pub enable: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestCommandRecord {
    fn default() -> &'a RequestCommandRecord {
        <RequestCommandRecord as ::protobuf::Message>::default_instance()
    }
}

impl RequestCommandRecord {
    pub fn new() -> RequestCommandRecord {
        ::std::default::Default::default()
    }

    // .RequestHeader header = 1;


    pub fn get_header(&self) -> &RequestHeader {
        self.header.as_ref().unwrap_or_else(|| <RequestHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: RequestHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut RequestHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> RequestHeader {
        self.header.take().unwrap_or_else(|| RequestHeader::new())
    }

    // bool enable = 2;


    pub fn get_enable(&self) -> bool {
        self.enable
    }
    pub fn clear_enable(&mut self) {
        self.enable = false;
    }

    // Param is passed by value, moved
    pub fn set_enable(&mut self, v: bool) {
        self.enable = v;
    }
}

impl ::protobuf::Message for RequestCommandRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.enable != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.enable != false {
            os.write_bool(2, self.enable)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestCommandRecord {
        RequestCommandRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RequestHeader>>(
                "header",
                |m: &RequestCommandRecord| { &m.header },
                |m: &mut RequestCommandRecord| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable",
                |m: &RequestCommandRecord| { &m.enable },
                |m: &mut RequestCommandRecord| { &mut m.enable },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestCommandRecord>(
                "RequestCommandRecord",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestCommandRecord {
        static instance: ::protobuf::rt::LazyV2<RequestCommandRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestCommandRecord::new)
    }
}

impl ::protobuf::Clear for RequestCommandRecord {
    fn clear(&mut self) {
        self.header.clear();
        self.enable = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestCommandRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestCommandRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestStatus {
    // message fields
    pub header: ::protobuf::SingularPtrField<RequestHeader>,
    pub start_time: u64,
    pub end_time: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestStatus {
    fn default() -> &'a RequestStatus {
        <RequestStatus as ::protobuf::Message>::default_instance()
    }
}

impl RequestStatus {
    pub fn new() -> RequestStatus {
        ::std::default::Default::default()
    }

    // .RequestHeader header = 1;


    pub fn get_header(&self) -> &RequestHeader {
        self.header.as_ref().unwrap_or_else(|| <RequestHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: RequestHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut RequestHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> RequestHeader {
        self.header.take().unwrap_or_else(|| RequestHeader::new())
    }

    // uint64 start_time = 2;


    pub fn get_start_time(&self) -> u64 {
        self.start_time
    }
    pub fn clear_start_time(&mut self) {
        self.start_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: u64) {
        self.start_time = v;
    }

    // uint64 end_time = 3;


    pub fn get_end_time(&self) -> u64 {
        self.end_time
    }
    pub fn clear_end_time(&mut self) {
        self.end_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: u64) {
        self.end_time = v;
    }
}

impl ::protobuf::Message for RequestStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_time = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.start_time != 0 {
            my_size += ::protobuf::rt::value_size(2, self.start_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.end_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.start_time != 0 {
            os.write_uint64(2, self.start_time)?;
        }
        if self.end_time != 0 {
            os.write_uint64(3, self.end_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestStatus {
        RequestStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RequestHeader>>(
                "header",
                |m: &RequestStatus| { &m.header },
                |m: &mut RequestStatus| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "start_time",
                |m: &RequestStatus| { &m.start_time },
                |m: &mut RequestStatus| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "end_time",
                |m: &RequestStatus| { &m.end_time },
                |m: &mut RequestStatus| { &mut m.end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestStatus>(
                "RequestStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestStatus {
        static instance: ::protobuf::rt::LazyV2<RequestStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestStatus::new)
    }
}

impl ::protobuf::Clear for RequestStatus {
    fn clear(&mut self) {
        self.header.clear();
        self.start_time = 0;
        self.end_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestStatusLive {
    // message fields
    pub header: ::protobuf::SingularPtrField<RequestHeader>,
    pub enable: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestStatusLive {
    fn default() -> &'a RequestStatusLive {
        <RequestStatusLive as ::protobuf::Message>::default_instance()
    }
}

impl RequestStatusLive {
    pub fn new() -> RequestStatusLive {
        ::std::default::Default::default()
    }

    // .RequestHeader header = 1;


    pub fn get_header(&self) -> &RequestHeader {
        self.header.as_ref().unwrap_or_else(|| <RequestHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: RequestHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut RequestHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> RequestHeader {
        self.header.take().unwrap_or_else(|| RequestHeader::new())
    }

    // bool enable = 2;


    pub fn get_enable(&self) -> bool {
        self.enable
    }
    pub fn clear_enable(&mut self) {
        self.enable = false;
    }

    // Param is passed by value, moved
    pub fn set_enable(&mut self, v: bool) {
        self.enable = v;
    }
}

impl ::protobuf::Message for RequestStatusLive {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.enable != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.enable != false {
            os.write_bool(2, self.enable)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestStatusLive {
        RequestStatusLive::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RequestHeader>>(
                "header",
                |m: &RequestStatusLive| { &m.header },
                |m: &mut RequestStatusLive| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable",
                |m: &RequestStatusLive| { &m.enable },
                |m: &mut RequestStatusLive| { &mut m.enable },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestStatusLive>(
                "RequestStatusLive",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestStatusLive {
        static instance: ::protobuf::rt::LazyV2<RequestStatusLive> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestStatusLive::new)
    }
}

impl ::protobuf::Clear for RequestStatusLive {
    fn clear(&mut self) {
        self.header.clear();
        self.enable = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestStatusLive {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestStatusLive {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestImage {
    // message fields
    pub header: ::protobuf::SingularPtrField<RequestHeader>,
    pub start_time: u64,
    pub end_time: u64,
    pub resource: ::std::string::String,
    pub scale_x: f32,
    pub scale_y: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestImage {
    fn default() -> &'a RequestImage {
        <RequestImage as ::protobuf::Message>::default_instance()
    }
}

impl RequestImage {
    pub fn new() -> RequestImage {
        ::std::default::Default::default()
    }

    // .RequestHeader header = 1;


    pub fn get_header(&self) -> &RequestHeader {
        self.header.as_ref().unwrap_or_else(|| <RequestHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: RequestHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut RequestHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> RequestHeader {
        self.header.take().unwrap_or_else(|| RequestHeader::new())
    }

    // uint64 start_time = 2;


    pub fn get_start_time(&self) -> u64 {
        self.start_time
    }
    pub fn clear_start_time(&mut self) {
        self.start_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: u64) {
        self.start_time = v;
    }

    // uint64 end_time = 3;


    pub fn get_end_time(&self) -> u64 {
        self.end_time
    }
    pub fn clear_end_time(&mut self) {
        self.end_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: u64) {
        self.end_time = v;
    }

    // string resource = 4;


    pub fn get_resource(&self) -> &str {
        &self.resource
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: ::std::string::String) {
        self.resource = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut ::std::string::String {
        &mut self.resource
    }

    // Take field
    pub fn take_resource(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource, ::std::string::String::new())
    }

    // float scale_x = 5;


    pub fn get_scale_x(&self) -> f32 {
        self.scale_x
    }
    pub fn clear_scale_x(&mut self) {
        self.scale_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_scale_x(&mut self, v: f32) {
        self.scale_x = v;
    }

    // float scale_y = 6;


    pub fn get_scale_y(&self) -> f32 {
        self.scale_y
    }
    pub fn clear_scale_y(&mut self) {
        self.scale_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_scale_y(&mut self, v: f32) {
        self.scale_y = v;
    }
}

impl ::protobuf::Message for RequestImage {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_time = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end_time = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.scale_x = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.scale_y = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.start_time != 0 {
            my_size += ::protobuf::rt::value_size(2, self.start_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.end_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.resource.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.resource);
        }
        if self.scale_x != 0. {
            my_size += 5;
        }
        if self.scale_y != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.start_time != 0 {
            os.write_uint64(2, self.start_time)?;
        }
        if self.end_time != 0 {
            os.write_uint64(3, self.end_time)?;
        }
        if !self.resource.is_empty() {
            os.write_string(4, &self.resource)?;
        }
        if self.scale_x != 0. {
            os.write_float(5, self.scale_x)?;
        }
        if self.scale_y != 0. {
            os.write_float(6, self.scale_y)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestImage {
        RequestImage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RequestHeader>>(
                "header",
                |m: &RequestImage| { &m.header },
                |m: &mut RequestImage| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "start_time",
                |m: &RequestImage| { &m.start_time },
                |m: &mut RequestImage| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "end_time",
                |m: &RequestImage| { &m.end_time },
                |m: &mut RequestImage| { &mut m.end_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource",
                |m: &RequestImage| { &m.resource },
                |m: &mut RequestImage| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "scale_x",
                |m: &RequestImage| { &m.scale_x },
                |m: &mut RequestImage| { &mut m.scale_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "scale_y",
                |m: &RequestImage| { &m.scale_y },
                |m: &mut RequestImage| { &mut m.scale_y },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestImage>(
                "RequestImage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestImage {
        static instance: ::protobuf::rt::LazyV2<RequestImage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestImage::new)
    }
}

impl ::protobuf::Clear for RequestImage {
    fn clear(&mut self) {
        self.header.clear();
        self.start_time = 0;
        self.end_time = 0;
        self.resource.clear();
        self.scale_x = 0.;
        self.scale_y = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestImage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestStreamImage {
    // message fields
    pub header: ::protobuf::SingularPtrField<RequestHeader>,
    pub start_time: u64,
    pub resource: ::std::string::String,
    pub scale_x: f32,
    pub scale_y: f32,
    pub client_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestStreamImage {
    fn default() -> &'a RequestStreamImage {
        <RequestStreamImage as ::protobuf::Message>::default_instance()
    }
}

impl RequestStreamImage {
    pub fn new() -> RequestStreamImage {
        ::std::default::Default::default()
    }

    // .RequestHeader header = 1;


    pub fn get_header(&self) -> &RequestHeader {
        self.header.as_ref().unwrap_or_else(|| <RequestHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: RequestHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut RequestHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> RequestHeader {
        self.header.take().unwrap_or_else(|| RequestHeader::new())
    }

    // uint64 start_time = 2;


    pub fn get_start_time(&self) -> u64 {
        self.start_time
    }
    pub fn clear_start_time(&mut self) {
        self.start_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: u64) {
        self.start_time = v;
    }

    // string resource = 3;


    pub fn get_resource(&self) -> &str {
        &self.resource
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: ::std::string::String) {
        self.resource = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut ::std::string::String {
        &mut self.resource
    }

    // Take field
    pub fn take_resource(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource, ::std::string::String::new())
    }

    // float scale_x = 4;


    pub fn get_scale_x(&self) -> f32 {
        self.scale_x
    }
    pub fn clear_scale_x(&mut self) {
        self.scale_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_scale_x(&mut self, v: f32) {
        self.scale_x = v;
    }

    // float scale_y = 5;


    pub fn get_scale_y(&self) -> f32 {
        self.scale_y
    }
    pub fn clear_scale_y(&mut self) {
        self.scale_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_scale_y(&mut self, v: f32) {
        self.scale_y = v;
    }

    // string client_id = 6;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestStreamImage {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_time = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.scale_x = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.scale_y = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.start_time != 0 {
            my_size += ::protobuf::rt::value_size(2, self.start_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.resource.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.resource);
        }
        if self.scale_x != 0. {
            my_size += 5;
        }
        if self.scale_y != 0. {
            my_size += 5;
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.client_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.start_time != 0 {
            os.write_uint64(2, self.start_time)?;
        }
        if !self.resource.is_empty() {
            os.write_string(3, &self.resource)?;
        }
        if self.scale_x != 0. {
            os.write_float(4, self.scale_x)?;
        }
        if self.scale_y != 0. {
            os.write_float(5, self.scale_y)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(6, &self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestStreamImage {
        RequestStreamImage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RequestHeader>>(
                "header",
                |m: &RequestStreamImage| { &m.header },
                |m: &mut RequestStreamImage| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "start_time",
                |m: &RequestStreamImage| { &m.start_time },
                |m: &mut RequestStreamImage| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource",
                |m: &RequestStreamImage| { &m.resource },
                |m: &mut RequestStreamImage| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "scale_x",
                |m: &RequestStreamImage| { &m.scale_x },
                |m: &mut RequestStreamImage| { &mut m.scale_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "scale_y",
                |m: &RequestStreamImage| { &m.scale_y },
                |m: &mut RequestStreamImage| { &mut m.scale_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &RequestStreamImage| { &m.client_id },
                |m: &mut RequestStreamImage| { &mut m.client_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestStreamImage>(
                "RequestStreamImage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestStreamImage {
        static instance: ::protobuf::rt::LazyV2<RequestStreamImage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestStreamImage::new)
    }
}

impl ::protobuf::Clear for RequestStreamImage {
    fn clear(&mut self) {
        self.header.clear();
        self.start_time = 0;
        self.resource.clear();
        self.scale_x = 0.;
        self.scale_y = 0.;
        self.client_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestStreamImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestStreamImage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestStopStreamImage {
    // message fields
    pub header: ::protobuf::SingularPtrField<RequestHeader>,
    pub client_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestStopStreamImage {
    fn default() -> &'a RequestStopStreamImage {
        <RequestStopStreamImage as ::protobuf::Message>::default_instance()
    }
}

impl RequestStopStreamImage {
    pub fn new() -> RequestStopStreamImage {
        ::std::default::Default::default()
    }

    // .RequestHeader header = 1;


    pub fn get_header(&self) -> &RequestHeader {
        self.header.as_ref().unwrap_or_else(|| <RequestHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: RequestHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut RequestHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> RequestHeader {
        self.header.take().unwrap_or_else(|| RequestHeader::new())
    }

    // string client_id = 2;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestStopStreamImage {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(2, &self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestStopStreamImage {
        RequestStopStreamImage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RequestHeader>>(
                "header",
                |m: &RequestStopStreamImage| { &m.header },
                |m: &mut RequestStopStreamImage| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &RequestStopStreamImage| { &m.client_id },
                |m: &mut RequestStopStreamImage| { &mut m.client_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestStopStreamImage>(
                "RequestStopStreamImage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestStopStreamImage {
        static instance: ::protobuf::rt::LazyV2<RequestStopStreamImage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestStopStreamImage::new)
    }
}

impl ::protobuf::Clear for RequestStopStreamImage {
    fn clear(&mut self) {
        self.header.clear();
        self.client_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestStopStreamImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestStopStreamImage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Status {
    // message fields
    pub text: ::protobuf::SingularPtrField<super::primitives::Text>,
    pub point3d: ::protobuf::SingularPtrField<super::primitives::Point3d>,
    pub point2d: ::protobuf::SingularPtrField<super::primitives::Point2d>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Status {
    fn default() -> &'a Status {
        <Status as ::protobuf::Message>::default_instance()
    }
}

impl Status {
    pub fn new() -> Status {
        ::std::default::Default::default()
    }

    // .Text text = 1;


    pub fn get_text(&self) -> &super::primitives::Text {
        self.text.as_ref().unwrap_or_else(|| <super::primitives::Text as ::protobuf::Message>::default_instance())
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: super::primitives::Text) {
        self.text = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut super::primitives::Text {
        if self.text.is_none() {
            self.text.set_default();
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> super::primitives::Text {
        self.text.take().unwrap_or_else(|| super::primitives::Text::new())
    }

    // .Point3d point3d = 2;


    pub fn get_point3d(&self) -> &super::primitives::Point3d {
        self.point3d.as_ref().unwrap_or_else(|| <super::primitives::Point3d as ::protobuf::Message>::default_instance())
    }
    pub fn clear_point3d(&mut self) {
        self.point3d.clear();
    }

    pub fn has_point3d(&self) -> bool {
        self.point3d.is_some()
    }

    // Param is passed by value, moved
    pub fn set_point3d(&mut self, v: super::primitives::Point3d) {
        self.point3d = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_point3d(&mut self) -> &mut super::primitives::Point3d {
        if self.point3d.is_none() {
            self.point3d.set_default();
        }
        self.point3d.as_mut().unwrap()
    }

    // Take field
    pub fn take_point3d(&mut self) -> super::primitives::Point3d {
        self.point3d.take().unwrap_or_else(|| super::primitives::Point3d::new())
    }

    // .Point2d point2d = 3;


    pub fn get_point2d(&self) -> &super::primitives::Point2d {
        self.point2d.as_ref().unwrap_or_else(|| <super::primitives::Point2d as ::protobuf::Message>::default_instance())
    }
    pub fn clear_point2d(&mut self) {
        self.point2d.clear();
    }

    pub fn has_point2d(&self) -> bool {
        self.point2d.is_some()
    }

    // Param is passed by value, moved
    pub fn set_point2d(&mut self, v: super::primitives::Point2d) {
        self.point2d = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_point2d(&mut self) -> &mut super::primitives::Point2d {
        if self.point2d.is_none() {
            self.point2d.set_default();
        }
        self.point2d.as_mut().unwrap()
    }

    // Take field
    pub fn take_point2d(&mut self) -> super::primitives::Point2d {
        self.point2d.take().unwrap_or_else(|| super::primitives::Point2d::new())
    }
}

impl ::protobuf::Message for Status {
    fn is_initialized(&self) -> bool {
        for v in &self.text {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.point3d {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.point2d {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.text)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.point3d)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.point2d)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.text.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.point3d.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.point2d.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.text.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.point3d.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.point2d.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Status {
        Status::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::primitives::Text>>(
                "text",
                |m: &Status| { &m.text },
                |m: &mut Status| { &mut m.text },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::primitives::Point3d>>(
                "point3d",
                |m: &Status| { &m.point3d },
                |m: &mut Status| { &mut m.point3d },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::primitives::Point2d>>(
                "point2d",
                |m: &Status| { &m.point2d },
                |m: &mut Status| { &mut m.point2d },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Status>(
                "Status",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Status {
        static instance: ::protobuf::rt::LazyV2<Status> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Status::new)
    }
}

impl ::protobuf::Clear for Status {
    fn clear(&mut self) {
        self.text.clear();
        self.point3d.clear();
        self.point2d.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Status {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Stream {
    // message fields
    pub path: ::std::string::String,
    pub subject: ::std::string::String,
    pub start_time: u64,
    pub end_time: u64,
    pub items: ::protobuf::RepeatedField<StreamSet>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Stream {
    fn default() -> &'a Stream {
        <Stream as ::protobuf::Message>::default_instance()
    }
}

impl Stream {
    pub fn new() -> Stream {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string subject = 2;


    pub fn get_subject(&self) -> &str {
        &self.subject
    }
    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }

    // uint64 start_time = 3;


    pub fn get_start_time(&self) -> u64 {
        self.start_time
    }
    pub fn clear_start_time(&mut self) {
        self.start_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: u64) {
        self.start_time = v;
    }

    // uint64 end_time = 4;


    pub fn get_end_time(&self) -> u64 {
        self.end_time
    }
    pub fn clear_end_time(&mut self) {
        self.end_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: u64) {
        self.end_time = v;
    }

    // repeated .StreamSet items = 5;


    pub fn get_items(&self) -> &[StreamSet] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::protobuf::RepeatedField<StreamSet>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::protobuf::RepeatedField<StreamSet> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::protobuf::RepeatedField<StreamSet> {
        ::std::mem::replace(&mut self.items, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Stream {
    fn is_initialized(&self) -> bool {
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_time = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end_time = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.items)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.subject);
        }
        if self.start_time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.start_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::value_size(4, self.end_time, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.subject.is_empty() {
            os.write_string(2, &self.subject)?;
        }
        if self.start_time != 0 {
            os.write_uint64(3, self.start_time)?;
        }
        if self.end_time != 0 {
            os.write_uint64(4, self.end_time)?;
        }
        for v in &self.items {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Stream {
        Stream::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &Stream| { &m.path },
                |m: &mut Stream| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subject",
                |m: &Stream| { &m.subject },
                |m: &mut Stream| { &mut m.subject },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "start_time",
                |m: &Stream| { &m.start_time },
                |m: &mut Stream| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "end_time",
                |m: &Stream| { &m.end_time },
                |m: &mut Stream| { &mut m.end_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StreamSet>>(
                "items",
                |m: &Stream| { &m.items },
                |m: &mut Stream| { &mut m.items },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Stream>(
                "Stream",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Stream {
        static instance: ::protobuf::rt::LazyV2<Stream> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Stream::new)
    }
}

impl ::protobuf::Clear for Stream {
    fn clear(&mut self) {
        self.path.clear();
        self.subject.clear();
        self.start_time = 0;
        self.end_time = 0;
        self.items.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Stream {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Stream {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamSet {
    // message fields
    pub timestamp: u64,
    // message oneof groups
    pub Schema: ::std::option::Option<StreamSet_oneof_Schema>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamSet {
    fn default() -> &'a StreamSet {
        <StreamSet as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum StreamSet_oneof_Schema {
    status(Status),
    text(super::primitives::Text),
    point2d(super::primitives::Point2d),
    point3d(super::primitives::Point3d),
    image(super::primitives::Image),
}

impl StreamSet {
    pub fn new() -> StreamSet {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // .Status status = 2;


    pub fn get_status(&self) -> &Status {
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::status(ref v)) => v,
            _ => <Status as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_status(&mut self) {
        self.Schema = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::status(v))
    }

    // Mutable pointer to the field.
    pub fn mut_status(&mut self) -> &mut Status {
        if let ::std::option::Option::Some(StreamSet_oneof_Schema::status(_)) = self.Schema {
        } else {
            self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::status(Status::new()));
        }
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::status(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_status(&mut self) -> Status {
        if self.has_status() {
            match self.Schema.take() {
                ::std::option::Option::Some(StreamSet_oneof_Schema::status(v)) => v,
                _ => panic!(),
            }
        } else {
            Status::new()
        }
    }

    // .Text text = 3;


    pub fn get_text(&self) -> &super::primitives::Text {
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::text(ref v)) => v,
            _ => <super::primitives::Text as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_text(&mut self) {
        self.Schema = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::text(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: super::primitives::Text) {
        self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::text(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text(&mut self) -> &mut super::primitives::Text {
        if let ::std::option::Option::Some(StreamSet_oneof_Schema::text(_)) = self.Schema {
        } else {
            self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::text(super::primitives::Text::new()));
        }
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::text(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text(&mut self) -> super::primitives::Text {
        if self.has_text() {
            match self.Schema.take() {
                ::std::option::Option::Some(StreamSet_oneof_Schema::text(v)) => v,
                _ => panic!(),
            }
        } else {
            super::primitives::Text::new()
        }
    }

    // .Point2d point2d = 4;


    pub fn get_point2d(&self) -> &super::primitives::Point2d {
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::point2d(ref v)) => v,
            _ => <super::primitives::Point2d as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_point2d(&mut self) {
        self.Schema = ::std::option::Option::None;
    }

    pub fn has_point2d(&self) -> bool {
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::point2d(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_point2d(&mut self, v: super::primitives::Point2d) {
        self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::point2d(v))
    }

    // Mutable pointer to the field.
    pub fn mut_point2d(&mut self) -> &mut super::primitives::Point2d {
        if let ::std::option::Option::Some(StreamSet_oneof_Schema::point2d(_)) = self.Schema {
        } else {
            self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::point2d(super::primitives::Point2d::new()));
        }
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::point2d(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_point2d(&mut self) -> super::primitives::Point2d {
        if self.has_point2d() {
            match self.Schema.take() {
                ::std::option::Option::Some(StreamSet_oneof_Schema::point2d(v)) => v,
                _ => panic!(),
            }
        } else {
            super::primitives::Point2d::new()
        }
    }

    // .Point3d point3d = 5;


    pub fn get_point3d(&self) -> &super::primitives::Point3d {
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::point3d(ref v)) => v,
            _ => <super::primitives::Point3d as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_point3d(&mut self) {
        self.Schema = ::std::option::Option::None;
    }

    pub fn has_point3d(&self) -> bool {
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::point3d(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_point3d(&mut self, v: super::primitives::Point3d) {
        self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::point3d(v))
    }

    // Mutable pointer to the field.
    pub fn mut_point3d(&mut self) -> &mut super::primitives::Point3d {
        if let ::std::option::Option::Some(StreamSet_oneof_Schema::point3d(_)) = self.Schema {
        } else {
            self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::point3d(super::primitives::Point3d::new()));
        }
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::point3d(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_point3d(&mut self) -> super::primitives::Point3d {
        if self.has_point3d() {
            match self.Schema.take() {
                ::std::option::Option::Some(StreamSet_oneof_Schema::point3d(v)) => v,
                _ => panic!(),
            }
        } else {
            super::primitives::Point3d::new()
        }
    }

    // .Image image = 6;


    pub fn get_image(&self) -> &super::primitives::Image {
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::image(ref v)) => v,
            _ => <super::primitives::Image as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_image(&mut self) {
        self.Schema = ::std::option::Option::None;
    }

    pub fn has_image(&self) -> bool {
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::image(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_image(&mut self, v: super::primitives::Image) {
        self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::image(v))
    }

    // Mutable pointer to the field.
    pub fn mut_image(&mut self) -> &mut super::primitives::Image {
        if let ::std::option::Option::Some(StreamSet_oneof_Schema::image(_)) = self.Schema {
        } else {
            self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::image(super::primitives::Image::new()));
        }
        match self.Schema {
            ::std::option::Option::Some(StreamSet_oneof_Schema::image(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_image(&mut self) -> super::primitives::Image {
        if self.has_image() {
            match self.Schema.take() {
                ::std::option::Option::Some(StreamSet_oneof_Schema::image(v)) => v,
                _ => panic!(),
            }
        } else {
            super::primitives::Image::new()
        }
    }
}

impl ::protobuf::Message for StreamSet {
    fn is_initialized(&self) -> bool {
        if let Some(StreamSet_oneof_Schema::status(ref v)) = self.Schema {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StreamSet_oneof_Schema::text(ref v)) = self.Schema {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StreamSet_oneof_Schema::point2d(ref v)) = self.Schema {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StreamSet_oneof_Schema::point3d(ref v)) = self.Schema {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StreamSet_oneof_Schema::image(ref v)) = self.Schema {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::status(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::text(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::point2d(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::point3d(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Schema = ::std::option::Option::Some(StreamSet_oneof_Schema::image(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.Schema {
            match v {
                &StreamSet_oneof_Schema::status(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StreamSet_oneof_Schema::text(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StreamSet_oneof_Schema::point2d(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StreamSet_oneof_Schema::point3d(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StreamSet_oneof_Schema::image(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        if let ::std::option::Option::Some(ref v) = self.Schema {
            match v {
                &StreamSet_oneof_Schema::status(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StreamSet_oneof_Schema::text(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StreamSet_oneof_Schema::point2d(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StreamSet_oneof_Schema::point3d(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StreamSet_oneof_Schema::image(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamSet {
        StreamSet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &StreamSet| { &m.timestamp },
                |m: &mut StreamSet| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Status>(
                "status",
                StreamSet::has_status,
                StreamSet::get_status,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::primitives::Text>(
                "text",
                StreamSet::has_text,
                StreamSet::get_text,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::primitives::Point2d>(
                "point2d",
                StreamSet::has_point2d,
                StreamSet::get_point2d,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::primitives::Point3d>(
                "point3d",
                StreamSet::has_point3d,
                StreamSet::get_point3d,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::primitives::Image>(
                "image",
                StreamSet::has_image,
                StreamSet::get_image,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamSet>(
                "StreamSet",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamSet {
        static instance: ::protobuf::rt::LazyV2<StreamSet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamSet::new)
    }
}

impl ::protobuf::Clear for StreamSet {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.Schema = ::std::option::Option::None;
        self.Schema = ::std::option::Option::None;
        self.Schema = ::std::option::Option::None;
        self.Schema = ::std::option::Option::None;
        self.Schema = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamSet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WSResponse {
    // message fields
    pub path: ::std::string::String,
    pub data: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WSResponse {
    fn default() -> &'a WSResponse {
        <WSResponse as ::protobuf::Message>::default_instance()
    }
}

impl WSResponse {
    pub fn new() -> WSResponse {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // .google.protobuf.Any data = 2;


    pub fn get_data(&self) -> &::protobuf::well_known_types::Any {
        self.data.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::well_known_types::Any) {
        self.data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::well_known_types::Any {
        self.data.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for WSResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if let Some(ref v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WSResponse {
        WSResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &WSResponse| { &m.path },
                |m: &mut WSResponse| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "data",
                |m: &WSResponse| { &m.data },
                |m: &mut WSResponse| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WSResponse>(
                "WSResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WSResponse {
        static instance: ::protobuf::rt::LazyV2<WSResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WSResponse::new)
    }
}

impl ::protobuf::Clear for WSResponse {
    fn clear(&mut self) {
        self.path.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WSResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WSResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

/// Extension fields
pub mod exts {

    pub const path: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::types::ProtobufTypeString> = ::protobuf::ext::ExtFieldOptional { field_number: 54200, phantom: ::std::marker::PhantomData };

    pub const response_type: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::types::ProtobufTypeString> = ::protobuf::ext::ExtFieldOptional { field_number: 54201, phantom: ::std::marker::PhantomData };

    pub const response_schema: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::types::ProtobufTypeString> = ::protobuf::ext::ExtFieldOptional { field_number: 54202, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\x1a\x20google/protobuf/descriptor.proto\x1a\x19google/\
    protobuf/any.proto\x1a\x10primitives.proto\"#\n\rRequestHeader\x12\x12\n\
    \x04path\x18\x01\x20\x01(\tR\x04path\"j\n\x14RequestCommandRecord\x12&\n\
    \x06header\x18\x01\x20\x01(\x0b2\x0e.RequestHeaderR\x06header\x12\x16\n\
    \x06enable\x18\x02\x20\x01(\x08R\x06enable:\x12\xc2\xbb\x1a\x0eCommand/R\
    ecord\"\x98\x01\n\rRequestStatus\x12&\n\x06header\x18\x01\x20\x01(\x0b2\
    \x0e.RequestHeaderR\x06header\x12\x1d\n\nstart_time\x18\x02\x20\x01(\x04\
    R\tstartTime\x12\x19\n\x08end_time\x18\x03\x20\x01(\x04R\x07endTime:%\
    \xca\xbb\x1a\x06Stream\xc2\xbb\x1a\rStatus/Status\xd2\xbb\x1a\x06Status\
    \"d\n\x11RequestStatusLive\x12&\n\x06header\x18\x01\x20\x01(\x0b2\x0e.Re\
    questHeaderR\x06header\x12\x16\n\x06enable\x18\x02\x20\x01(\x08R\x06enab\
    le:\x0f\xc2\xbb\x1a\x0bStatus/Live\"\xe6\x01\n\x0cRequestImage\x12&\n\
    \x06header\x18\x01\x20\x01(\x0b2\x0e.RequestHeaderR\x06header\x12\x1d\n\
    \nstart_time\x18\x02\x20\x01(\x04R\tstartTime\x12\x19\n\x08end_time\x18\
    \x03\x20\x01(\x04R\x07endTime\x12\x1a\n\x08resource\x18\x04\x20\x01(\tR\
    \x08resource\x12\x17\n\x07scale_x\x18\x05\x20\x01(\x02R\x06scaleX\x12\
    \x17\n\x07scale_y\x18\x06\x20\x01(\x02R\x06scaleY:&\xca\xbb\x1a\x06Strea\
    m\xd2\xbb\x1a\tImageData\xc2\xbb\x1a\x0bImage/Image\"\xf4\x01\n\x12Reque\
    stStreamImage\x12&\n\x06header\x18\x01\x20\x01(\x0b2\x0e.RequestHeaderR\
    \x06header\x12\x1d\n\nstart_time\x18\x02\x20\x01(\x04R\tstartTime\x12\
    \x1a\n\x08resource\x18\x03\x20\x01(\tR\x08resource\x12\x17\n\x07scale_x\
    \x18\x04\x20\x01(\x02R\x06scaleX\x12\x17\n\x07scale_y\x18\x05\x20\x01(\
    \x02R\x06scaleY\x12\x1b\n\tclient_id\x18\x06\x20\x01(\tR\x08clientId:,\
    \xc2\xbb\x1a\x11Image/StreamImage\xca\xbb\x1a\x06Stream\xd2\xbb\x1a\tIma\
    geData\"x\n\x16RequestStopStreamImage\x12&\n\x06header\x18\x01\x20\x01(\
    \x0b2\x0e.RequestHeaderR\x06header\x12\x1b\n\tclient_id\x18\x02\x20\x01(\
    \tR\x08clientId:\x19\xc2\xbb\x1a\x15Image/StopStreamImage\"k\n\x06Status\
    \x12\x19\n\x04text\x18\x01\x20\x01(\x0b2\x05.TextR\x04text\x12\"\n\x07po\
    int3d\x18\x02\x20\x01(\x0b2\x08.Point3dR\x07point3d\x12\"\n\x07point2d\
    \x18\x03\x20\x01(\x0b2\x08.Point2dR\x07point2d\"\x92\x01\n\x06Stream\x12\
    \x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12\x18\n\x07subject\x18\x02\
    \x20\x01(\tR\x07subject\x12\x1d\n\nstart_time\x18\x03\x20\x01(\x04R\tsta\
    rtTime\x12\x19\n\x08end_time\x18\x04\x20\x01(\x04R\x07endTime\x12\x20\n\
    \x05items\x18\x05\x20\x03(\x0b2\n.StreamSetR\x05items\"\xdf\x01\n\tStrea\
    mSet\x12\x1c\n\ttimestamp\x18\x01\x20\x01(\x04R\ttimestamp\x12!\n\x06sta\
    tus\x18\x02\x20\x01(\x0b2\x07.StatusH\0R\x06status\x12\x1b\n\x04text\x18\
    \x03\x20\x01(\x0b2\x05.TextH\0R\x04text\x12$\n\x07point2d\x18\x04\x20\
    \x01(\x0b2\x08.Point2dH\0R\x07point2d\x12$\n\x07point3d\x18\x05\x20\x01(\
    \x0b2\x08.Point3dH\0R\x07point3d\x12\x1e\n\x05image\x18\x06\x20\x01(\x0b\
    2\x06.ImageH\0R\x05imageB\x08\n\x06Schema\"J\n\nWSResponse\x12\x12\n\x04\
    path\x18\x01\x20\x01(\tR\x04path\x12(\n\x04data\x18\x02\x20\x01(\x0b2\
    \x14.google.protobuf.AnyR\x04data:5\n\x04path\x18\xb8\xa7\x03\x20\x01(\t\
    \x12\x1f.google.protobuf.MessageOptionsR\x04path:F\n\rresponse_type\x18\
    \xb9\xa7\x03\x20\x01(\t\x12\x1f.google.protobuf.MessageOptionsR\x0crespo\
    nseType:J\n\x0fresponse_schema\x18\xba\xa7\x03\x20\x01(\t\x12\x1f.google\
    .protobuf.MessageOptionsR\x0eresponseSchemaJ\xc1\x18\n\x06\x12\x04\0\0q\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0*\n!\n\
    \x02\x03\x01\x12\x03\x03\0#\"\x16import\x20\"image.proto\";\n\n\t\n\x02\
    \x03\x02\x12\x03\x06\0\x1a\n\x14\n\x01\x07\x12\x04\t\0\r\x01\x1a\t\x20Re\
    quest\n\n\t\n\x02\x07\0\x12\x03\n\x04\x18\n\n\n\x03\x07\0\x02\x12\x03\t\
    \x07%\n\n\n\x03\x07\0\x05\x12\x03\n\x04\n\n\n\n\x03\x07\0\x01\x12\x03\n\
    \x0b\x0f\n\n\n\x03\x07\0\x03\x12\x03\n\x12\x17\n\t\n\x02\x07\x01\x12\x03\
    \x0b\x04!\n\n\n\x03\x07\x01\x02\x12\x03\t\x07%\n\n\n\x03\x07\x01\x05\x12\
    \x03\x0b\x04\n\n\n\n\x03\x07\x01\x01\x12\x03\x0b\x0b\x18\n\n\n\x03\x07\
    \x01\x03\x12\x03\x0b\x1b\x20\n\t\n\x02\x07\x02\x12\x03\x0c\x04#\n\n\n\
    \x03\x07\x02\x02\x12\x03\t\x07%\n\n\n\x03\x07\x02\x05\x12\x03\x0c\x04\n\
    \n\n\n\x03\x07\x02\x01\x12\x03\x0c\x0b\x1a\n\n\n\x03\x07\x02\x03\x12\x03\
    \x0c\x1d\"\n\n\n\x02\x04\0\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x10\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\x11\x04\x14\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x11\x0b\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x11\x12\x13\n\n\n\x02\
    \x04\x01\x12\x04\x15\0\x19\x01\n\n\n\x03\x04\x01\x01\x12\x03\x15\x08\x1c\
    \n\n\n\x03\x04\x01\x07\x12\x03\x16\x04%\n\r\n\x06\x04\x01\x07\xb8\xa7\
    \x03\x12\x03\x16\x04%\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x17\x04\x1d\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x17\x04\x11\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x17\x12\x18\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x17\x1b\
    \x1c\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x18\x04\x14\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03\x18\x04\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x18\t\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x18\x12\x13\n\n\n\x02\
    \x04\x02\x12\x04\x1b\0\"\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1b\x08\x15\n\
    \n\n\x03\x04\x02\x07\x12\x03\x1c\x04$\n\r\n\x06\x04\x02\x07\xb8\xa7\x03\
    \x12\x03\x1c\x04$\n\n\n\x03\x04\x02\x07\x12\x03\x1d\x04&\n\r\n\x06\x04\
    \x02\x07\xb9\xa7\x03\x12\x03\x1d\x04&\n\n\n\x03\x04\x02\x07\x12\x03\x1e\
    \x04(\n\r\n\x06\x04\x02\x07\xba\xa7\x03\x12\x03\x1e\x04(\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03\x1f\x04\x1d\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x1f\
    \x04\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1f\x12\x18\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x1f\x1b\x1c\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03\x20\x04\x1a\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x20\x04\n\n\x0c\
    \n\x05\x04\x02\x02\x01\x01\x12\x03\x20\x0b\x15\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x20\x18\x19\n\x0b\n\x04\x04\x02\x02\x02\x12\x03!\x04\
    \x18\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03!\x04\n\n\x0c\n\x05\x04\x02\
    \x02\x02\x01\x12\x03!\x0b\x13\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03!\
    \x16\x17\n\x89\x01\n\x02\x04\x03\x12\x04-\01\x012}\n//\x20[deprecated]\n\
    message\x20RequestStatusRecord\x20{\noption\x20(path)\x20=\x20\"Status/R\
    ecord\";\nRequestHeader\x20header\x20=\x201;\nbool\x20enable\x20=\x202;\
    \n}\n\n\n\n\x03\x04\x03\x01\x12\x03-\x08\x19\n\n\n\x03\x04\x03\x07\x12\
    \x03.\x04\"\n\r\n\x06\x04\x03\x07\xb8\xa7\x03\x12\x03.\x04\"\n\x0b\n\x04\
    \x04\x03\x02\0\x12\x03/\x04\x1d\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03/\
    \x04\x11\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03/\x12\x18\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03/\x1b\x1c\n\x0b\n\x04\x04\x03\x02\x01\x12\x030\x04\
    \x14\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x030\x04\x08\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x030\t\x0f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x030\
    \x12\x13\n\n\n\x02\x04\x04\x12\x043\0=\x01\n\n\n\x03\x04\x04\x01\x12\x03\
    3\x08\x14\n\n\n\x03\x04\x04\x07\x12\x034\x04\"\n\r\n\x06\x04\x04\x07\xb8\
    \xa7\x03\x12\x034\x04\"\n\n\n\x03\x04\x04\x07\x12\x035\x04&\n\r\n\x06\
    \x04\x04\x07\xb9\xa7\x03\x12\x035\x04&\n\n\n\x03\x04\x04\x07\x12\x036\
    \x04+\n\r\n\x06\x04\x04\x07\xba\xa7\x03\x12\x036\x04+\n\x0b\n\x04\x04\
    \x04\x02\0\x12\x037\x04\x1d\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x037\x04\
    \x11\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x037\x12\x18\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x037\x1b\x1c\n\x0b\n\x04\x04\x04\x02\x01\x12\x038\x04\x1a\
    \n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x038\x04\n\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x038\x0b\x15\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x038\x18\
    \x19\n\x0b\n\x04\x04\x04\x02\x02\x12\x039\x04\x18\n\x0c\n\x05\x04\x04\
    \x02\x02\x05\x12\x039\x04\n\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x039\x0b\
    \x13\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x039\x16\x17\n\x0b\n\x04\x04\
    \x04\x02\x03\x12\x03:\x04\x18\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03:\
    \x04\n\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03:\x0b\x13\n\x0c\n\x05\x04\
    \x04\x02\x03\x03\x12\x03:\x16\x17\n\x0b\n\x04\x04\x04\x02\x04\x12\x03;\
    \x04\x16\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\x03;\x04\t\n\x0c\n\x05\x04\
    \x04\x02\x04\x01\x12\x03;\n\x11\n\x0c\n\x05\x04\x04\x02\x04\x03\x12\x03;\
    \x14\x15\n\x0b\n\x04\x04\x04\x02\x05\x12\x03<\x04\x16\n\x0c\n\x05\x04\
    \x04\x02\x05\x05\x12\x03<\x04\t\n\x0c\n\x05\x04\x04\x02\x05\x01\x12\x03<\
    \n\x11\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03<\x14\x15\n\n\n\x02\x04\
    \x05\x12\x04?\0I\x01\n\n\n\x03\x04\x05\x01\x12\x03?\x08\x1a\n\n\n\x03\
    \x04\x05\x07\x12\x03@\x04(\n\r\n\x06\x04\x05\x07\xb8\xa7\x03\x12\x03@\
    \x04(\n\n\n\x03\x04\x05\x07\x12\x03A\x04&\n\r\n\x06\x04\x05\x07\xb9\xa7\
    \x03\x12\x03A\x04&\n\n\n\x03\x04\x05\x07\x12\x03B\x04+\n\r\n\x06\x04\x05\
    \x07\xba\xa7\x03\x12\x03B\x04+\n\x0b\n\x04\x04\x05\x02\0\x12\x03C\x04\
    \x1d\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03C\x04\x11\n\x0c\n\x05\x04\x05\
    \x02\0\x01\x12\x03C\x12\x18\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03C\x1b\
    \x1c\n\x0b\n\x04\x04\x05\x02\x01\x12\x03D\x04\x1a\n\x0c\n\x05\x04\x05\
    \x02\x01\x05\x12\x03D\x04\n\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03D\x0b\
    \x15\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03D\x18\x19\n\x0b\n\x04\x04\
    \x05\x02\x02\x12\x03E\x04\x18\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03E\
    \x04\n\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03E\x0b\x13\n\x0c\n\x05\x04\
    \x05\x02\x02\x03\x12\x03E\x16\x17\n\x0b\n\x04\x04\x05\x02\x03\x12\x03F\
    \x04\x16\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x03F\x04\t\n\x0c\n\x05\x04\
    \x05\x02\x03\x01\x12\x03F\n\x11\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x03F\
    \x14\x15\n\x0b\n\x04\x04\x05\x02\x04\x12\x03G\x04\x16\n\x0c\n\x05\x04\
    \x05\x02\x04\x05\x12\x03G\x04\t\n\x0c\n\x05\x04\x05\x02\x04\x01\x12\x03G\
    \n\x11\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x03G\x14\x15\n\x0b\n\x04\x04\
    \x05\x02\x05\x12\x03H\x04\x19\n\x0c\n\x05\x04\x05\x02\x05\x05\x12\x03H\
    \x04\n\n\x0c\n\x05\x04\x05\x02\x05\x01\x12\x03H\x0b\x14\n\x0c\n\x05\x04\
    \x05\x02\x05\x03\x12\x03H\x17\x18\n\n\n\x02\x04\x06\x12\x04K\0O\x01\n\n\
    \n\x03\x04\x06\x01\x12\x03K\x08\x1e\n\n\n\x03\x04\x06\x07\x12\x03L\x04,\
    \n\r\n\x06\x04\x06\x07\xb8\xa7\x03\x12\x03L\x04,\n\x0b\n\x04\x04\x06\x02\
    \0\x12\x03M\x04\x1d\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03M\x04\x11\n\x0c\
    \n\x05\x04\x06\x02\0\x01\x12\x03M\x12\x18\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x03M\x1b\x1c\n\x0b\n\x04\x04\x06\x02\x01\x12\x03N\x04\x19\n\x0c\n\
    \x05\x04\x06\x02\x01\x05\x12\x03N\x04\n\n\x0c\n\x05\x04\x06\x02\x01\x01\
    \x12\x03N\x0b\x14\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03N\x17\x18\n\n\n\
    \x02\x04\x07\x12\x04R\0V\x01\n\n\n\x03\x04\x07\x01\x12\x03R\x08\x0e\n\
    \x0b\n\x04\x04\x07\x02\0\x12\x03S\x04\x12\n\x0c\n\x05\x04\x07\x02\0\x06\
    \x12\x03S\x04\x08\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03S\t\r\n\x0c\n\x05\
    \x04\x07\x02\0\x03\x12\x03S\x10\x11\n\x0b\n\x04\x04\x07\x02\x01\x12\x03T\
    \x04\x18\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03T\x04\x0b\n\x0c\n\x05\
    \x04\x07\x02\x01\x01\x12\x03T\x0c\x13\n\x0c\n\x05\x04\x07\x02\x01\x03\
    \x12\x03T\x16\x17\n\x0b\n\x04\x04\x07\x02\x02\x12\x03U\x04\x18\n\x0c\n\
    \x05\x04\x07\x02\x02\x06\x12\x03U\x04\x0b\n\x0c\n\x05\x04\x07\x02\x02\
    \x01\x12\x03U\x0c\x13\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03U\x16\x17\n\
    \n\n\x02\x04\x08\x12\x04Y\0_\x01\n\n\n\x03\x04\x08\x01\x12\x03Y\x08\x0e\
    \n\x0b\n\x04\x04\x08\x02\0\x12\x03Z\x04\x14\n\x0c\n\x05\x04\x08\x02\0\
    \x05\x12\x03Z\x04\n\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03Z\x0b\x0f\n\x0c\
    \n\x05\x04\x08\x02\0\x03\x12\x03Z\x12\x13\n\x0b\n\x04\x04\x08\x02\x01\
    \x12\x03[\x04\x17\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03[\x04\n\n\x0c\n\
    \x05\x04\x08\x02\x01\x01\x12\x03[\x0b\x12\n\x0c\n\x05\x04\x08\x02\x01\
    \x03\x12\x03[\x15\x16\n\x0b\n\x04\x04\x08\x02\x02\x12\x03\\\x04\x1a\n\
    \x0c\n\x05\x04\x08\x02\x02\x05\x12\x03\\\x04\n\n\x0c\n\x05\x04\x08\x02\
    \x02\x01\x12\x03\\\x0b\x15\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03\\\x18\
    \x19\n\x0b\n\x04\x04\x08\x02\x03\x12\x03]\x04\x18\n\x0c\n\x05\x04\x08\
    \x02\x03\x05\x12\x03]\x04\n\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x03]\x0b\
    \x13\n\x0c\n\x05\x04\x08\x02\x03\x03\x12\x03]\x16\x17\n\x0b\n\x04\x04\
    \x08\x02\x04\x12\x03^\x04!\n\x0c\n\x05\x04\x08\x02\x04\x04\x12\x03^\x04\
    \x0c\n\x0c\n\x05\x04\x08\x02\x04\x06\x12\x03^\r\x16\n\x0c\n\x05\x04\x08\
    \x02\x04\x01\x12\x03^\x17\x1c\n\x0c\n\x05\x04\x08\x02\x04\x03\x12\x03^\
    \x1f\x20\n\n\n\x02\x04\t\x12\x04a\0j\x01\n\n\n\x03\x04\t\x01\x12\x03a\
    \x08\x11\n\x0b\n\x04\x04\t\x02\0\x12\x03b\x04\x19\n\x0c\n\x05\x04\t\x02\
    \0\x05\x12\x03b\x04\n\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03b\x0b\x14\n\x0c\
    \n\x05\x04\t\x02\0\x03\x12\x03b\x17\x18\n\x0c\n\x04\x04\t\x08\0\x12\x04c\
    \x04i\x05\n\x0c\n\x05\x04\t\x08\0\x01\x12\x03c\n\x10\n\x0b\n\x04\x04\t\
    \x02\x01\x12\x03d\x08\x1a\n\x0c\n\x05\x04\t\x02\x01\x06\x12\x03d\x08\x0e\
    \n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03d\x0f\x15\n\x0c\n\x05\x04\t\x02\
    \x01\x03\x12\x03d\x18\x19\n\x0b\n\x04\x04\t\x02\x02\x12\x03e\x08\x16\n\
    \x0c\n\x05\x04\t\x02\x02\x06\x12\x03e\x08\x0c\n\x0c\n\x05\x04\t\x02\x02\
    \x01\x12\x03e\r\x11\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03e\x14\x15\n\x0b\
    \n\x04\x04\t\x02\x03\x12\x03f\x08\x1c\n\x0c\n\x05\x04\t\x02\x03\x06\x12\
    \x03f\x08\x0f\n\x0c\n\x05\x04\t\x02\x03\x01\x12\x03f\x10\x17\n\x0c\n\x05\
    \x04\t\x02\x03\x03\x12\x03f\x1a\x1b\n\x0b\n\x04\x04\t\x02\x04\x12\x03g\
    \x08\x1c\n\x0c\n\x05\x04\t\x02\x04\x06\x12\x03g\x08\x0f\n\x0c\n\x05\x04\
    \t\x02\x04\x01\x12\x03g\x10\x17\n\x0c\n\x05\x04\t\x02\x04\x03\x12\x03g\
    \x1a\x1b\n\x0b\n\x04\x04\t\x02\x05\x12\x03h\x08\x18\n\x0c\n\x05\x04\t\
    \x02\x05\x06\x12\x03h\x08\r\n\x0c\n\x05\x04\t\x02\x05\x01\x12\x03h\x0e\
    \x13\n\x0c\n\x05\x04\t\x02\x05\x03\x12\x03h\x16\x17\n\n\n\x02\x04\n\x12\
    \x04m\0q\x01\n\n\n\x03\x04\n\x01\x12\x03m\x08\x12\n\x0b\n\x04\x04\n\x02\
    \0\x12\x03n\x04\x14\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03n\x04\n\n\x0c\n\
    \x05\x04\n\x02\0\x01\x12\x03n\x0b\x0f\n\x0c\n\x05\x04\n\x02\0\x03\x12\
    \x03n\x12\x13\n\x1a\n\x04\x04\n\x02\x01\x12\x03p\x04!\x1a\r\x20Stream,\
    \x20...\n\n\x0c\n\x05\x04\n\x02\x01\x06\x12\x03p\x04\x17\n\x0c\n\x05\x04\
    \n\x02\x01\x01\x12\x03p\x18\x1c\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03p\
    \x1f\x20b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
